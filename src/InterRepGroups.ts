// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, JSONValue, TypedMap, Entity, Bytes, Address, BigInt } from "@graphprotocol/graph-ts"

export class NewRootHash extends ethereum.Event {
    get params(): NewRootHash__Params {
        return new NewRootHash__Params(this)
    }
}

export class NewRootHash__Params {
    _event: NewRootHash

    constructor(event: NewRootHash) {
        this._event = event
    }

    get provider(): Bytes {
        return this._event.parameters[0].value.toBytes()
    }

    get groupName(): Bytes {
        return this._event.parameters[1].value.toBytes()
    }

    get identityCommitment(): BigInt {
        return this._event.parameters[2].value.toBigInt()
    }

    get rootHash(): BigInt {
        return this._event.parameters[3].value.toBigInt()
    }
}

export class InterRepGroups extends ethereum.SmartContract {
    static bind(address: Address): InterRepGroups {
        return new InterRepGroups("InterRepGroups", address)
    }

    admin(): Address {
        let result = super.call("admin", "admin():(address)", [])

        return result[0].toAddress()
    }

    try_admin(): ethereum.CallResult<Address> {
        let result = super.tryCall("admin", "admin():(address)", [])
        if (result.reverted) {
            return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue(value[0].toAddress())
    }

    implementation(): Address {
        let result = super.call("implementation", "implementation():(address)", [])

        return result[0].toAddress()
    }

    try_implementation(): ethereum.CallResult<Address> {
        let result = super.tryCall("implementation", "implementation():(address)", [])
        if (result.reverted) {
            return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue(value[0].toAddress())
    }
}

export class ConstructorCall extends ethereum.Call {
    get inputs(): ConstructorCall__Inputs {
        return new ConstructorCall__Inputs(this)
    }

    get outputs(): ConstructorCall__Outputs {
        return new ConstructorCall__Outputs(this)
    }
}

export class ConstructorCall__Inputs {
    _call: ConstructorCall

    constructor(call: ConstructorCall) {
        this._call = call
    }

    get _logic(): Address {
        return this._call.inputValues[0].value.toAddress()
    }

    get admin_(): Address {
        return this._call.inputValues[1].value.toAddress()
    }

    get _data(): Bytes {
        return this._call.inputValues[2].value.toBytes()
    }
}

export class ConstructorCall__Outputs {
    _call: ConstructorCall

    constructor(call: ConstructorCall) {
        this._call = call
    }
}

export class DefaultCall extends ethereum.Call {
    get inputs(): DefaultCall__Inputs {
        return new DefaultCall__Inputs(this)
    }

    get outputs(): DefaultCall__Outputs {
        return new DefaultCall__Outputs(this)
    }
}

export class DefaultCall__Inputs {
    _call: DefaultCall

    constructor(call: DefaultCall) {
        this._call = call
    }
}

export class DefaultCall__Outputs {
    _call: DefaultCall

    constructor(call: DefaultCall) {
        this._call = call
    }
}
